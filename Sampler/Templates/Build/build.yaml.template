---
####################################################
#          ModuleBuilder Configuration             #
####################################################
<%
    if ($PLASTER_PARAM_ModuleType -ne 'dsccommunity') {
@"
# Path to the Module Manifest to build (where path will be resolved from)
# SourcePath: ./Sampler/Sampler.psd1
# Output Directory where ModuleBuilder will build the Module, relative to module manifest
# OutputDirectory: ../output/Sampler
"@
    }
%>
CopyPaths:
  - en-US
<%
    if ($PLASTER_PARAM_ModuleType -eq 'dsccommunity' -or $PLASTER_PARAM_ModuleType -match 'complete' -or $PLASTER_PARAM_Features -Contains ("All") -or $PLASTER_PARAM_Features -Contains ("DSCResources")) {
"  - DSCResources"
    }
    else {
"#  - DSCResources"
    }
%>
  # - Modules
Encoding: UTF8
<%
    if ($PLASTER_PARAM_ModuleType -ne 'dsccommunity') {
@"
# Suffix to add to Root module PSM1 after merge (here, the Set-Alias exporting IB tasks)
# suffix: suffix.ps1
# prefix: prefix.ps1
"@
    }
"VersionedOutputDirectory: true"
%>

####################################################
#      ModuleBuilder Submodules Configuration      #
####################################################

NestedModule:
<%
    if ($PLASTER_PARAM_ModuleType -eq 'dsccommunity') {
@"
    DscResource.Common:
      CopyOnly: true
      Path: ./output/RequiredModules/DscResource.Common
      AddToManifest: false
      Exclude: PSGetModuleInfo.xml
"@
    }
    elseif ($PLASTER_PARAM_ModuleType -match 'complete' -or $PLASTER_PARAM_Features -Contains ("All") -or $PLASTER_PARAM_Features -Contains ("DSCResources")) {
@"
  DscResource.Common:
    CopyOnly: true
    Path: ./output/RequiredModules/DscResource.Common # relative to $buildroot, default to '$sourcePath/Modules/$NestedModuleName'
    # Destination: './output/$ProjectName/$ModuleVersionFolder/Modules/$NestedModuleName' # or override with path relative to $buildroot
    AddToManifest: false
    # include: '*.*'
    Exclude: PSGetModuleInfo.xml
    #Filter:
  Folder.Common:
    CopyOnly: true
    AddToManifest: false
"@
  }
  else {
@"
#  HelperSubmodule: # This is the first submodule to build into the output
#    Path: ./*/Modules/HelperSubmodule/HelperSubmodule.psd1
#    # $ModuleVersionFolder is trimmed (remove metadata & Prerelease tag) and OutputDirectory expanded (the only one)
#    OutputDirectory: $BuildModuleOutput/$ProjectName/$ModuleVersionFolder/Modules/HelperSubmodule
#    VersionedOutputDirectory: false
#    AddToManifest: false
#    SemVer: $ModuleVersionFolder
#    # suffix:
#    # prefix:
"@
}

%>

####################################################
#       Sampler Pipeline Configuration             #
####################################################
<%
    if ($PLASTER_PARAM_ModuleType -eq 'dsccommunity') {
@"
BuildWorkflow:
  '.':
    - build
    - test
"@
    }
    else {
@"
# Defining 'Workflows' (suite of InvokeBuild tasks) to be run using their alias
BuildWorkflow:
  '.': # "." is the default Invoke-Build workflow. It is called when no -Tasks is specified to the build.ps1
    - build
    - test
"@
    }
%>

  build:
    - Clean
    - Build_Module_ModuleBuilder
    - Build_NestedModules_ModuleBuilder
    - Create_changelog_release_output
<%
    if($PLASTER_PARAM_ModuleType -in @('dsccommunity')) {
@"
    - Generate_Conceptual_Help
    - Generate_Wiki_Content
"@
    }
%>

  pack:
    - build
    - package_module_nupkg

  hqrmtest:
    - DscResource_Tests_Stop_On_Fail

  # Defining test task to be run when invoking `./build.ps1 -Tasks test`
  test:
    - Pester_Tests_Stop_On_Fail
    - Pester_if_Code_Coverage_Under_Threshold
    # Use this task when you have multiple parallel tests, which produce multiple
    # code coverage files and needs to get merged into one file.
    #- Merge_CodeCoverage_Files

  publish:
    - publish_module_to_gallery
<%
    if($PLASTER_PARAM_ModuleType -in @('dsccommunity','newDscCommunity', 'CompleteModule', 'SimpleModule') -or $PLASTER_PARAM_Features -Contains ("All") -or $PLASTER_PARAM_Features -Contains ("GitHub")) {
@"
    - Publish_Release_To_GitHub
    - Publish_GitHub_Wiki_Content
    - Create_ChangeLog_GitHub_PR
"@
    }
%>

####################################################
#       PESTER  Configuration                      #
####################################################

Pester:
  OutputFormat: NUnitXML
  # Excludes one or more paths from being used to calculate code coverage.
  ExcludeFromCodeCoverage:
<%
    if ($PLASTER_PARAM_ModuleType -eq 'dsccommunity') {
@"
    - Modules/DscResource.Common
"@
    }
    elseif ($PLASTER_PARAM_ModuleType -match 'complete' -or $PLASTER_PARAM_Features -Contains ("All") -or $PLASTER_PARAM_Features -Contains ("DSCResources"))
    {
@"
    - Modules/DscResource.Common
    # - Template
"@
    }
%>
  # If no scripts are defined the default is to use all the tests under the project's
  # tests folder or source folder (if present). Test script paths can be defined to
  # only run tests in certain folders, or run specific test files, or can be use to
  # specify the order tests are run.
  Script:
<%
    if ($PLASTER_PARAM_ModuleType -eq 'dsccommunity') {
@"
    - tests/Unit
"@
    }
    else {
@"
  # - tests/QA/module.tests.ps1
  # - tests/QA
  # - tests/Unit
  # - tests/Integration
  ExcludeTag:
    - helpQuality
    - FunctionalQuality
    - TestQuality
"@
    }
%>
  Tag:
  CodeCoverageThreshold: 85 # Set to 0 to bypass
<%
    if ($PLASTER_PARAM_ModuleType -eq 'dsccommunity') {
@"
  CodeCoverageOutputFile: JaCoCo_coverage.xml
  CodeCoverageOutputFileEncoding: ascii
  # CodeCoverageMergedOutputFile: JaCoCo_Merged.xml
"@
    }
    else {
@"
  # CodeCoverageOutputFile: JaCoCo_$OsShortName.xml
  # CodeCoverageOutputFileEncoding: ascii
  # CodeCoverageMergedOutputFile: JaCoCo_Merged.xml
"@
    }
%>
<%
    if ($PLASTER_PARAM_ModuleType -eq 'dsccommunity' -or $PLASTER_PARAM_ModuleType -match 'complete' -or $PLASTER_PARAM_Features -Contains ("All") -or $PLASTER_PARAM_Features -Contains ("DSCResources"))
    {
@"

DscTest:
  ExcludeTag:
    - "Common Tests - New Error-Level Script Analyzer Rules"
  Tag:
  ExcludeSourceFile:
    - output
  ExcludeModuleFile:
"@
    }

    if ($PLASTER_PARAM_ModuleType -eq 'dsccommunity') {
@"
    - Modules/DscResource.Common
"@
    }
    elseif ($PLASTER_PARAM_ModuleType -match 'complete' -or $PLASTER_PARAM_Features -Contains ("All") -or $PLASTER_PARAM_Features -Contains ("DSCResources"))
    {
@"
    - Modules/DscResource.Common
  #  - Templates
"@
    }
    else
    {
@"
  #  - Modules/DscResource.Common
  #  - Templates
"@
    }
%>

# Import ModuleBuilder tasks from a specific PowerShell module using the build
# task's alias. Wildcard * can be used to specify all tasks that has a similar
# prefix and or suffix. The module contain the task must be added as a required
# module in the file RequiredModules.psd1.
ModuleBuildTasks:
  Sampler:
    - '*.build.Sampler.ib.tasks'
<%
    if($PLASTER_PARAM_ModuleType -in @('dsccommunity','newDscCommunity', 'CompleteModule', 'SimpleModule') -or $PLASTER_PARAM_Features -Contains ("All") -or $PLASTER_PARAM_Features -Contains ("GitHub")) {
@"
  Sampler.GitHubTasks:
    - '*.ib.tasks'
"@
    }
%>
<%
    if($PLASTER_PARAM_ModuleType -in @('dsccommunity')) {
@"
  DscResource.DocGenerator:
    - 'Task.*'
"@
    }
%>

# Invoke-Build Header to be used to 'decorate' the terminal output of the tasks.
TaskHeader: |
  param($Path)
  ""
  "=" * 79
  Write-Build Cyan "`t`t`t$($Task.Name.replace("_"," ").ToUpper())"
  Write-Build DarkGray  "$(Get-BuildSynopsis $Task)"
  "-" * 79
  Write-Build DarkGray "  $Path"
  Write-Build DarkGray "  $($Task.InvocationInfo.ScriptName):$($Task.InvocationInfo.ScriptLineNumber)"
  ""
<%
    if($PLASTER_PARAM_ModuleType -in @('dsccommunity')) {
@"

GitHubConfig:
  GitHubFilesToAdd:
    - 'CHANGELOG.md'
  GitHubConfigUserName: dscbot
  GitHubConfigUserEmail: dsccommunity@outlook.com
  UpdateChangelogOnPrerelease: false
"@
    }
    elseif ($PLASTER_PARAM_Features -Contains ("All") -or $PLASTER_PARAM_Features -Contains ("GitHub")) {
@"

# Below is the GitHub configuration to automatically create a PR to update the Changelog
# after the release of a version. (see Create_ChangeLog_GitHub_PR task of Sampler.GitHubTasks)
# GitHubConfig:
#   GitHubFilesToAdd:
#     - 'CHANGELOG.md'
#   GitHubConfigUserName: YourAccountUserName
#   GitHubConfigUserEmail: youremail@yourprovider.com
#   UpdateChangelogOnPrerelease: false
"@
    }
%>

<%
    if ($PLASTER_PARAM_ModuleType -eq 'dsccommunity' -or $PLASTER_PARAM_Features -Contains ("All")) {
@"
####################################################
#      DscResource.DocGenerator Configuration      #
####################################################
DscResource.DocGenerator:
  Generate_Conceptual_Help:
    MarkdownCodeRegularExpression:
      - '\```(.+?)\```' # Match inline code-block
      - '\\(\\)' # Match escaped backslash
      - '\[[^\[]+\]\((.+?)\)' # Match markdown URL
      - '_(.+?)_' # Match Italic (underscore)
      - '\*\*(.+?)\*\*' # Match bold
      - '\*(.+?)\*' # Match Italic (asterisk)
"@
    }
%>
