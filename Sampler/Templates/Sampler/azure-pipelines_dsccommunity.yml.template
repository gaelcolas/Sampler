trigger:
  branches:
    include:
    - <%= ${PLASTER_PARAM_MainGitBranch} %>
  paths:
    include:
    - source/*
  tags:
    include:
    - "v*"
    exclude:
    - "*-*"

variables:
  buildFolderName: output
  buildArtifactName: output
  testResultFolderName: testResults
  testArtifactName: testResults
  sourceFolderName: source
  defaultBranch: <%= ${PLASTER_PARAM_MainGitBranch} %>

stages:
  - stage: Build
    jobs:
      - job: Package_Module
        displayName: 'Package Module'
        pool:
          vmImage: 'ubuntu 16.04'
        steps:
          - task: GitVersion@5
            name: gitVersion
            displayName: 'Evaluate Next Version'
            inputs:
              runtime: 'core'
              configFilePath: 'GitVersion.yml'
          - task: PowerShell@2
            name: package
            displayName: 'Build & Package Module'
            inputs:
              filePath: './build.ps1'
              arguments: '-ResolveDependency -tasks pack'
              pwsh: true
            env:
              ModuleVersion: $(gitVersion.NuGetVersionV2)
          - task: PublishPipelineArtifact@1
            displayName: 'Publish Build Artifact'
            inputs:
              targetPath: '$(buildFolderName)/'
              artifact: $(buildArtifactName)
              publishLocation: 'pipeline'
              parallel: true

  - stage: Test
    dependsOn: Build
    jobs:
      - job: Test_HQRM
        displayName: 'HQRM'
        pool:
          vmImage: 'windows-2019'
        timeoutInMinutes: 0
        steps:
          - task: DownloadPipelineArtifact@2
            displayName: 'Download Build Artifact'
            inputs:
              buildType: 'current'
              artifactName: $(buildArtifactName)
              targetPath: '$(Build.SourcesDirectory)/$(buildFolderName)'
          - task: PowerShell@2
            name: test
            displayName: 'Run HQRM Test'
            inputs:
              filePath: './build.ps1'
              arguments: '-Tasks hqrmtest'
              pwsh: false
          - task: PublishTestResults@2
            displayName: 'Publish Test Results'
            condition: succeededOrFailed()
            inputs:
              testResultsFormat: 'NUnit'
              testResultsFiles: 'output/testResults/NUnit*.xml'
              testRunTitle: 'HQRM'

      # If several pipeline jobs are running test, consider renaming this job:
      - job: Test_Unit
        displayName: 'Unit'
        pool:
          vmImage: 'windows-2019'
        timeoutInMinutes: 0
        steps:
          - task: DownloadPipelineArtifact@2
            displayName: 'Download Build Artifact'
            inputs:
              buildType: 'current'
              artifactName: $(buildArtifactName)
              targetPath: '$(Build.SourcesDirectory)/$(buildFolderName)'
          - task: PowerShell@2
            name: test
            displayName: 'Run Unit Test'
            inputs:
              filePath: './build.ps1'
              arguments: "-Tasks test -PesterScript 'tests/Unit'"
              pwsh: true
          - task: PublishTestResults@2
            displayName: 'Publish Test Results'
            condition: succeededOrFailed()
            inputs:
              testResultsFormat: 'NUnit'
              testResultsFiles: '$(buildFolderName)/$(testResultFolderName)/NUnit*.xml'
              # If several pipeline jobs are generating test result, consider renaming this title:
              testRunTitle: 'Unit'
          - task: PublishPipelineArtifact@1
            displayName: 'Publish Test Artifact'
            inputs:
              targetPath: '$(buildFolderName)/$(testResultFolderName)/'
              artifactName: $(testArtifactName)
              # If several pipeline jobs are generating code coverage, replace above with this:
              #artifactName: 'CodeCoverageWindows' # Can be any, in the pipeline, unique name
              parallel: true

      # If several pipeline jobs should run unit tests, uncomment this:
      ## If several pipeline jobs are generating test result consider renaming this:
      #- job: Test_Unit_Linux
      #  displayName: 'Unit Linux'
      #  pool:
      #    vmImage: 'ubuntu 16.04'
      #  timeoutInMinutes: 0
      #  steps:
      #    - task: DownloadPipelineArtifact@2
      #      displayName: 'Download Build Artifact'
      #      inputs:
      #        buildType: 'current'
      #        artifactName: $(buildArtifactName)
      #        targetPath: '$(Build.SourcesDirectory)/$(buildFolderName)'
      #    - task: PowerShell@2
      #      name: test
      #      displayName: 'Run Unit Test'
      #      inputs:
      #        filePath: './build.ps1'
      #        arguments: "-Tasks test -PesterScript 'tests/Unit'"
      #        pwsh: true
      #    - task: PublishTestResults@2
      #      displayName: 'Publish Test Results'
      #      condition: succeededOrFailed()
      #      inputs:
      #        testResultsFormat: 'NUnit'
      #        testResultsFiles: '$(buildFolderName)/$(testResultFolderName)/NUnit*.xml'
      #        # If several pipeline jobs are generating test result consider renaming this:
      #        testRunTitle: 'Unit Linux'
      #    - task: PublishPipelineArtifact@1
      #      displayName: 'Publish Test Artifact'
      #      inputs:
      #        targetPath: '$(buildFolderName)/$(testResultFolderName)/'
      #        # If several pipeline jobs are generating code coverage, consider renaming this:
      #        artifactName: 'CodeCoverageLinux' # Can be any, in the pipeline, unique name
      #        parallel: true

      - job: Test_Integration
        displayName: 'Integration'
        pool:
          vmImage: 'windows-2019'
        timeoutInMinutes: 0
        steps:
          - task: DownloadPipelineArtifact@2
            displayName: 'Download Build Artifact'
            inputs:
              buildType: 'current'
              artifactName: $(buildArtifactName)
              targetPath: '$(Build.SourcesDirectory)/$(buildFolderName)'
          - task: PowerShell@2
            name: configureWinRM
            displayName: 'Configure WinRM'
            inputs:
              targetType: 'inline'
              script: 'winrm quickconfig -quiet'
              pwsh: false
          - task: PowerShell@2
            name: test
            displayName: 'Run Integration Test'
            inputs:
              filePath: './build.ps1'
              arguments: "-Tasks test -CodeCoverageThreshold 0 -PesterScript 'tests/Integration'"
              pwsh: false
          - task: PublishTestResults@2
            displayName: 'Publish Test Results'
            condition: succeededOrFailed()
            inputs:
              testResultsFormat: 'NUnit'
              testResultsFiles: '$(buildFolderName)/$(testResultFolderName)/NUnit*.xml'
              testRunTitle: 'Integration'

      - job: Code_Coverage
        displayName: 'Publish Code Coverage'
        dependsOn: Test_Unit
        pool:
          vmImage: 'ubuntu 16.04'
        timeoutInMinutes: 0
        steps:
          - pwsh: |
              $repositoryOwner,$repositoryName = $env:BUILD_REPOSITORY_NAME -split '/'
              echo "##vso[task.setvariable variable=RepositoryOwner;isOutput=true]$repositoryOwner"
              echo "##vso[task.setvariable variable=RepositoryName;isOutput=true]$repositoryName"
            name: dscBuildVariable
            displayName: 'Set Environment Variables'
          - task: DownloadPipelineArtifact@2
            displayName: 'Download Build Artifact'
            inputs:
              buildType: 'current'
              artifactName: $(buildArtifactName)
              targetPath: '$(Build.SourcesDirectory)/$(buildFolderName)'
          - task: DownloadPipelineArtifact@2
            # If several pipeline jobs are generating code coverage, consider renaming this display name:
            displayName: 'Download Test Artifact'
            inputs:
              buildType: 'current'
              # If several pipeline jobs are generating code coverage, set the correct artifact name:
              artifactName: $(testArtifactName)
              targetPath: '$(Build.SourcesDirectory)/$(buildFolderName)/$(testResultFolderName)'
          # If several pipeline jobs are generating code coverage, uncomment these tasks:
          #- task: DownloadPipelineArtifact@2
          #  displayName: 'Download Test Artifact Linux'
          #  inputs:
          #    buildType: 'current'
          #    artifactName: 'CodeCoverageLinux'
          #    targetPath: '$(Build.SourcesDirectory)/$(buildFolderName)/$(testResultFolderName)'
          #- task: PowerShell@2 # Merges the code coverage files.
          #  name: merge
          #  displayName: 'Merge Code Coverage files'
          #  inputs:
          #    filePath: './build.ps1'
          #    arguments: '-tasks merge'
          #    pwsh: true
          - task: PublishCodeCoverageResults@1
            displayName: 'Publish Code Coverage to Azure DevOps'
            inputs:
              codeCoverageTool: 'JaCoCo'
              summaryFileLocation: '$(Build.SourcesDirectory)/$(buildFolderName)/$(testResultFolderName)/JaCoCo_coverage.xml'
              pathToSources: '$(Build.SourcesDirectory)/$(sourceFolderName)/'
          - script: |
              bash <(curl -s https://codecov.io/bash) -f "./$(buildFolderName)/$(testResultFolderName)/JaCoCo_coverage.xml"
            displayName: 'Publish Code Coverage to Codecov.io'

  - stage: Deploy
    dependsOn: Test
    condition: |
      and(
        succeeded(),
        or(
          eq(variables['Build.SourceBranch'], 'refs/heads/<%= ${PLASTER_PARAM_MainGitBranch} %>'),
          startsWith(variables['Build.SourceBranch'], 'refs/tags/')
        ),
        contains(variables['System.TeamFoundationCollectionUri'], '<%= ${PLASTER_PARAM_GitHubOwnerDscCommunity} %>')
      )
    jobs:
      - job: Deploy_Module
        displayName: 'Deploy Module'
        pool:
          vmImage: 'ubuntu 16.04'
        steps:
          - task: DownloadPipelineArtifact@2
            displayName: 'Download Pipeline Artifact'
            inputs:
              buildType: 'current'
              artifactName: $(buildArtifactName)
              targetPath: '$(Build.SourcesDirectory)/$(buildArtifactName)'
          - task: PowerShell@2
            name: publishRelease
            displayName: 'Publish Release'
            inputs:
              filePath: './build.ps1'
              arguments: '-tasks publish'
              pwsh: true
            env:
              GitHubToken: $(GitHubToken)
              GalleryApiToken: $(GalleryApiToken)
              ReleaseBranch: $(defaultBranch)
              MainGitBranch: $(defaultBranch)
          - task: PowerShell@2
            name: sendChangelogPR
            displayName: 'Send Changelog PR'
            inputs:
              filePath: './build.ps1'
              arguments: '-tasks Create_ChangeLog_GitHub_PR'
              pwsh: true
            env:
              GitHubToken: $(GitHubToken)
              ReleaseBranch: $(defaultBranch)
              MainGitBranch: $(defaultBranch)
