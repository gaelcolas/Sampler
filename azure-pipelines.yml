trigger:
- master

pool:
  vmImage: 'ubuntu 16.04'
#variables:

steps:
- task: GitVersion@5
  name: gitversion
  inputs:
    runtime: 'core'
    configFilePath: 'GitVersion.yml'

- task: PowerShell@2
  name: GetModuleName
  inputs:
    script: |
      $moduleName = (Get-ChildItem $(Build.SourcesDirectory)/*/*.psd1 | Where-Object {
                ($_.Directory.Name -match 'source|src' -or $_.Directory.Name -eq $_.BaseName) -and
                $(try { Test-ModuleManifest $_.FullName -ErrorAction Stop }catch{$false}) }
            ).BaseName
      echo "##vso[task.setvariable variable=myOutputVar;isOutput=true]$moduleName"
    pwsh: true

- task: PowerShell@2
  name: BuildModule
  inputs:
    filePath: './build.ps1'
    arguments: '-ResolveDependency'
    pwsh: true
  env:
    ModuleVersion: $(GitVersion.Informationalversion)

- task: PublishTestResults@2
  inputs:
    testResultsFormat: 'NUnit' # Options: JUnit, NUnit, VSTest, xUnit, cTest
    testResultsFiles: 'output/testResults/NUnit*.xml'
    #searchFolder: '$(System.DefaultWorkingDirectory)' # Optional
    #mergeTestResults: false # Optional
    #failTaskOnFailedTests: false # Optional
    #testRunTitle: # Optional
    #buildPlatform: # Optional
    #buildConfiguration: # Optional
    #publishRunAttachments: true # Optional

# Publish code coverage results
# Publish Cobertura or JaCoCo code coverage results from a build
- task: PublishCodeCoverageResults@1
  inputs:
    codeCoverageTool: 'JaCoCo' # Options: cobertura, jaCoCo
    summaryFileLocation: 'output/testResults/CodeCov*.xml'
    #pathToSources: # Optional
    #reportDirectory: # Optional
    #additionalCodeCoverageFiles: # Optional
    #failIfCoverageEmpty: false # Optional

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: 'output/$(GetModuleName.ModuleName)'
    ArtifactName: 'BuiltModule'
    publishLocation: 'Container'
