trigger:
  branches:
    include:
    - master
  tags:
    include:
    - "v*"
    exclude:
    - "*-*"
#variables:

stages:
  - stage: Build_artefact
    jobs:
      - job: BuildModuleJob
        pool:
          vmImage: 'ubuntu 16.04'
        steps:
          - task: GitVersion@5
            name: gitversion
            inputs:
              runtime: 'core'
              configFilePath: 'GitVersion.yml'

          - task: PowerShell@2
            name: Build
            inputs:
              filePath: './build.ps1'
              arguments: '-ResolveDependency -tasks pack'
              pwsh: true
            env:
              ModuleVersion: $(GitVersion.Informationalversion)

          - task: PublishBuildArtifacts@1
            inputs:
              PathtoPublish: 'output/'
              ArtifactName: 'output'
              publishLocation: 'Container'

  - stage: test_module
    dependsOn: Build_artefact
    jobs:
      - job: test_linux
        pool:
          vmImage: 'ubuntu 16.04'
        steps:
          - task: DownloadBuildArtifacts@0
            inputs:
              buildType: 'current'
              downloadType: 'single'
              artifactName: 'output'
              downloadPath: '$(Build.SourcesDirectory)'

          - task: PowerShell@2
            name: Test
            inputs:
              filePath: './build.ps1'
              arguments: '-tasks test'

          - task: PublishTestResults@2
            inputs:
              testResultsFormat: 'NUnit'
              testResultsFiles: 'output/testResults/NUnit*.xml'


          # Publish code coverage results
          - task: PublishCodeCoverageResults@1
            inputs:
              codeCoverageTool: 'JaCoCo'
              summaryFileLocation: 'output/testResults/CodeCov*.xml'
      - job: test_windows_core
        pool:
          vmImage: 'win1803'
        steps:
          - task: DownloadBuildArtifacts@0
            inputs:
              buildType: 'current'
              downloadType: 'single'
              artifactName: 'output'
              downloadPath: '$(Build.SourcesDirectory)'

          - task: PowerShell@2
            name: Test
            inputs:
              filePath: './build.ps1'
              arguments: '-tasks test'
              pwsh: true

          - task: PublishTestResults@2
            inputs:
              testResultsFormat: 'NUnit'
              testResultsFiles: 'output/testResults/NUnit*.xml'


          # Publish code coverage results
          - task: PublishCodeCoverageResults@1
            inputs:
              codeCoverageTool: 'JaCoCo'
              summaryFileLocation: 'output/testResults/CodeCov*.xml'
      - job: test_windows_ps
        pool:
          vmImage: 'win1803'
        steps:
          - task: DownloadBuildArtifacts@0
            inputs:
              buildType: 'current'
              downloadType: 'single'
              artifactName: 'output'
              downloadPath: '$(Build.SourcesDirectory)'

          - task: PowerShell@2
            name: Test
            inputs:
              filePath: './build.ps1'
              arguments: '-tasks test'
              pwsh: false

          - task: PublishTestResults@2
            inputs:
              testResultsFormat: 'NUnit'
              testResultsFiles: 'output/testResults/NUnit*.xml'


          # Publish code coverage results
          - task: PublishCodeCoverageResults@1
            inputs:
              codeCoverageTool: 'JaCoCo'
              summaryFileLocation: 'output/testResults/CodeCov*.xml'
      - job: test_macos
        pool:
          vmImage: 'macos-latest'
        steps:
          - task: DownloadBuildArtifacts@0
            inputs:
              buildType: 'current'
              downloadType: 'single'
              artifactName: 'output'
              downloadPath: '$(Build.SourcesDirectory)'

          - task: PowerShell@2
            name: Test
            inputs:
              filePath: './build.ps1'
              arguments: '-tasks test'
              pwsh: true

          - task: PublishTestResults@2
            inputs:
              testResultsFormat: 'NUnit'
              testResultsFiles: 'output/testResults/NUnit*.xml'

          # Publish code coverage results
          - task: PublishCodeCoverageResults@1
            inputs:
              codeCoverageTool: 'JaCoCo'
              summaryFileLocation: 'output/testResults/CodeCov*.xml'

  - stage: Deploy
    dependsOn: test_module
    # Only execute deploy stage if we're on master and previous stage succeeded
    condition: |
      and(
        succeeded(),
        or(
          eq(variables['Build.SourceBranch'], 'refs/heads/master'),
          startsWith(variables['Build.SourceBranch'], 'refs/tags/')
        )
      )
    jobs:
      - job: Deploy_Artefact
        pool:
          vmImage: 'ubuntu 16.04'
        steps:
          - task: DownloadBuildArtifacts@0
            inputs:
              buildType: 'current'
              downloadType: 'single'
              artifactName: 'output'
              downloadPath: '$(Build.SourcesDirectory)'
          - task: PowerShell@2
            name: publish_prerelease
            inputs:
              filePath: './build.ps1'
              arguments: '-tasks publish'
              pwsh: true
            env:
              GitHubToken: $(GitHubToken)
              GalleryApiToken: $(GalleryApiToken)
          - task: PowerShell@2
            name: send_changelog_PR
            inputs:
              filePath: './build.ps1'
              arguments: '-tasks Create_ChangeLog_GitHub_PR'
              pwsh: true
            env:
              GitHubToken: $(GitHubToken)
